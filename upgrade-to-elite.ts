import { config } from 'dotenv'
import { PrismaClient } from '@prisma/client'

// Charger les variables d'environnement
config({ path: '.env.local' })

const prisma = new PrismaClient()

async function upgradeToElite() {
  try {
    // Trouver le premier profil (ou vous pouvez sp√©cifier un username)
    const profile = await prisma.profile.findFirst({
      orderBy: { createdAt: 'desc' }
    })

    if (!profile) {
      console.log('‚ùå Aucun profil trouv√©')
      return
    }

    console.log(`üìù Profil trouv√©: ${profile.username} (${profile.displayName})`)
    console.log(`üìä Plan actuel: ${profile.plan}`)

    // Mettre √† jour le plan vers ELITE
    const updated = await prisma.profile.update({
      where: { id: profile.id },
      data: { plan: 'ELITE' }
    })

    console.log(`‚úÖ Plan mis √† jour vers: ${updated.plan}`)
    console.log(`üéâ Vous avez maintenant acc√®s √† toutes les fonctionnalit√©s Elite !`)
    console.log(`\nüìã Fonctionnalit√©s d√©bloqu√©es:`)
    console.log(`   - Comp√©titions illimit√©es`)
    console.log(`   - Sponsors illimit√©s`)
    console.log(`   - Galerie m√©dias illimit√©e`)
    console.log(`   - Analytics illimit√©es`)
    console.log(`   - Heatmap des clics`)
    console.log(`   - D√©mographie visiteurs`)
    console.log(`   - Export donn√©es (CSV)`)
    console.log(`   - Notifications en temps r√©el`)
    console.log(`   - Domaine personnalis√©`)
    console.log(`   - Badge "Elite" sur le profil`)
    console.log(`   - Support prioritaire`)

  } catch (error) {
    console.error('‚ùå Erreur:', error)
  } finally {
    await prisma.$disconnect()
  }
}

upgradeToElite()

