// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Sport {
  RUNNING
  CYCLING
  TRIATHLON
  SWIMMING
  SKIING
  OTHER
}

enum PlanType {
  FREE
  PRO
  ELITE
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?   // Optionnel pour les connexions OAuth (Google, etc.)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  profile       Profile?
  accounts      Account[]
  sessions      Session[]
  ambassador    Ambassador?
  promoCodeUsages PromoCodeUsage[]
  commissions   Commission[]
}

model Profile {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Basic Info
  username        String    @unique
  displayName     String
  bio             String?   @db.Text
  sport           Sport     @default(RUNNING)
  location        String?
  avatarUrl       String?
  coverUrl        String?
  
  // Plan
  plan            PlanType  @default(FREE)
  customDomain    String?   @unique
  
  // Trial Management
  trialEndsAt     DateTime?
  trialPlan       String?
  
  // Stats Manuelles (Phase 1)
  stats           Json?     // {personalRecords: [], achievements: []}
  
  // Social Links
  instagram       String?
  strava          String?
  youtube         String?
  tiktok          String?
  twitter         String?
  whatsapp        String?
  
  // Settings
  isPublic        Boolean   @default(true)
  theme           String    @default("runner-pro")
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  links           Link[]
  races           Race[]
  sponsors        Sponsor[]
  media           Media[]
  analytics       Analytics[]
}

model Link {
  id          String    @id @default(cuid())
  profileId   String
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  title       String
  url         String
  description String?
  icon        String?   // emoji ou icon name
  position    Int       @default(0)
  clicks      Int       @default(0)
  isActive    Boolean   @default(true)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([profileId])
}

model Race {
  id          String    @id @default(cuid())
  profileId   String
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  name        String
  date        DateTime
  location    String?
  distance    String?   // "Marathon", "10K", etc.
  result      String?   // "2:18:45", "1st place", etc.
  status      String    @default("upcoming") // "upcoming", "completed"
  url         String?   // Lien inscription ou résultats
  logoUrl     String?   // Logo de l'événement
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([profileId])
}

model Sponsor {
  id          String    @id @default(cuid())
  profileId   String
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  name        String
  logoUrl     String?
  websiteUrl  String?
  promoCode   String?
  description String?
  position    Int       @default(0)
  clicks      Int       @default(0)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([profileId])
}

model Media {
  id          String    @id @default(cuid())
  profileId   String
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  type        String    // "image", "video", "youtube"
  url         String
  thumbnail   String?
  title       String?
  description String?
  position    Int       @default(0)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([profileId])
}

model Analytics {
  id          String    @id @default(cuid())
  profileId   String
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  date        DateTime  @default(now())
  views       Int       @default(0)
  uniqueViews Int       @default(0)
  linkClicks  Int       @default(0)
  country     String?
  device      String?   // "mobile", "desktop"
  referrer    String?
  
  @@index([profileId, date])
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Affiliate/Ambassador Program Models
model Ambassador {
  id              String    @id @default(cuid())
  userId          String?   @unique // Optionnel : lié à un utilisateur Athlink existant
  user            User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Info de l'ambassadeur
  name            String
  email           String    @unique
  phone           String?
  status          String    @default("active") // "active", "inactive", "suspended"
  
  // Commission
  commissionRate  Float     @default(20.0) // Pourcentage (ex: 20.0 = 20%)
  commissionType  String    @default("recurring") // "recurring", "one-time", "lifetime"
  
  // Stats
  totalReferrals  Int       @default(0)
  totalRevenue    Float     @default(0.0)
  totalCommission Float     @default(0.0)
  
  // Metadata
  notes           String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  promoCodes      PromoCode[]
  usages          PromoCodeUsage[]
  commissions     Commission[]
  
  @@index([email])
  @@index([status])
}

model PromoCode {
  id              String    @id @default(cuid())
  ambassadorId    String
  ambassador      Ambassador @relation(fields: [ambassadorId], references: [id], onDelete: Cascade)
  
  // Code Info
  code            String    @unique // Ex: "ATHLETE20"
  description     String?
  
  // Discount
  discountType    String    // "percentage", "fixed_amount"
  discountValue   Float     // 20.0 pour 20% ou 10.0 pour 10€
  
  // Plan Restrictions
  applicablePlans String[]  // ["PRO", "ELITE"] ou [] pour tous
  
  // Usage Limits
  maxUses         Int?      // null = illimité
  currentUses     Int       @default(0)
  maxUsesPerUser  Int       @default(1) // Nombre de fois qu'un utilisateur peut l'utiliser
  
  // Validity
  startsAt        DateTime  @default(now())
  expiresAt       DateTime?
  isActive        Boolean   @default(true)
  
  // Stats
  totalRevenue    Float     @default(0.0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  usages          PromoCodeUsage[]
  
  @@index([ambassadorId])
  @@index([code])
  @@index([isActive])
}

model PromoCodeUsage {
  id              String    @id @default(cuid())
  promoCodeId     String
  promoCode       PromoCode @relation(fields: [promoCodeId], references: [id], onDelete: Cascade)
  
  ambassadorId    String
  ambassador      Ambassador @relation(fields: [ambassadorId], references: [id], onDelete: Cascade)
  
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Usage Info
  planType        String    // "PRO", "ELITE"
  billingCycle    String    // "monthly", "yearly"
  
  // Amounts
  originalAmount  Float     // Prix original
  discountAmount  Float     // Montant de la réduction
  finalAmount     Float     // Montant final payé
  
  // Stripe
  stripeCustomerId     String?
  stripeSubscriptionId String?
  
  // Metadata
  usedAt          DateTime  @default(now())
  ipAddress       String?
  userAgent       String?
  
  @@index([promoCodeId])
  @@index([ambassadorId])
  @@index([userId])
  @@index([stripeSubscriptionId])
}

model Commission {
  id              String    @id @default(cuid())
  ambassadorId    String
  ambassador      Ambassador @relation(fields: [ambassadorId], references: [id], onDelete: Cascade)
  
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Commission Info
  type            String    // "signup", "renewal", "upgrade"
  amount          Float
  rate            Float     // Taux appliqué au moment de la commission
  
  // Reference
  planType        String    // "PRO", "ELITE"
  revenue         Float     // Revenu total généré
  
  // Stripe
  stripeInvoiceId String?
  
  // Payment Status
  status          String    @default("pending") // "pending", "paid", "cancelled"
  paidAt          DateTime?
  
  // Metadata
  period          String?   // "2025-01" pour janvier 2025
  createdAt       DateTime  @default(now())
  
  @@index([ambassadorId])
  @@index([userId])
  @@index([status])
  @@index([period])
}